let restaurant;var map;const fullInfo={};window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){console.error(error)}else{self.map=new google.maps.Map(document.getElementById('map'),{zoom:16,center:restaurant.latlng,scrollwheel:!1});fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)}})}
fetchRestaurantFromURL=(callback)=>{if(self.restaurant){callback(null,self.restaurant)
return}
const id=getParameterByName('id');if(!id){error='No restaurant id in URL'
callback(error,null)}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return}
fillRestaurantHTML();callback(null,restaurant)})}}
isRestaurantInCookies=(name)=>{return decodeURIComponent(document.cookie).indexOf(name)!==-1}
fillRestaurantHTML=(restaurant=self.restaurant)=>{const name=document.getElementById('restaurant-name');name.innerHTML=restaurant.name;const address=document.getElementById('restaurant-address');address.innerHTML=restaurant.address;const image=document.getElementById('restaurant-img');image.className='restaurant-img'
image.src=DBHelper.imageUrlForRestaurant(restaurant);image.alt=`Image of ${restaurant.name} Restaurant`
const cuisine=document.getElementById('restaurant-cuisine');cuisine.innerHTML=restaurant.cuisine_type;if(restaurant.operating_hours){fillRestaurantHoursHTML()}
fillReviewsHTML()}
fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById('restaurant-hours');if(self.restaurant.is_favorite){const favStar=document.createElement('div');favStar.id=self.restaurant.id;favStar.setAttribute("aria-label","Mark restaurant as favourite");favStar.setAttribute('role','image');favStar.innerHTML=`&#9733;<label for=${self.restaurant.id}><p id="fav-description">Favourite</p></label>`;document.getElementById('restaurant-cuisine').appendChild(favStar)}
for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key;row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key];row.appendChild(time);hours.appendChild(row)}}
fillReviewsHTML=(reviews=self.restaurant.reviews)=>{const container=document.getElementById('reviews-container');const title=document.createElement('h2');const id=getParameterByName('id');const ul=document.getElementById('reviews-list');const form=document.createElement('form');form.innerHTML='<form action=""> <fieldset> <legend>Review restaurant:</legend> <label for="name-input">Name</label><br><input type="text" id="name-input" name="firstname"><br><span><label for="rating-input">Rating</label><br><select id="rating-input" name="rating"><option value="1">1</option> <option value="2">2</option> <option value="3">3</option> <option value="4">4</option><option value="5">5</option> </select><span><br><label for="review-input">Review</label><br><textarea id="review-input" type="text" name="lastname" cols="50" rows="5" value=""></textarea><br><label for="submit-input">Add review</label><br><input id="submit-input"  type="submit" value="Add a review"> </fieldset></form>'
title.innerHTML='Reviews';container.appendChild(title);container.appendChild(form);bindFormSubmit();getValuesFromForm();DBHelper.idbRead('reviews').then((reviews)=>{if(reviews&&reviews.length){reviews.forEach((review)=>{if(review.restaurant_id==id){ul.appendChild(createReviewHTML(review))}});container.appendChild(ul);return}else{DBHelper.fetchRestaurantReview(id).then((response)=>{response.forEach(review=>{ul.appendChild(createReviewHTML(review))});container.appendChild(ul);if(!container.hasChildNodes()){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return}})}})}
bindFormSubmit=()=>{const form=document.getElementsByTagName('fieldset')[0];const formButton=form.getElementsByTagName('input')[1];formButton.addEventListener('click',(e)=>{e.preventDefault();postReview();return!1})}
getValuesFromForm=()=>{const form=document.getElementsByTagName('fieldset')[0],inputNode=form.getElementsByTagName('input')[0],select=form.getElementsByTagName('select')[0],textareaNode=form.getElementsByTagName('textarea')[0];inputNode.addEventListener('input',(userInput)=>{fullInfo.name=userInput.target.value});select.addEventListener('change',(userInput)=>{fullInfo.rating=userInput.currentTarget.value});textareaNode.addEventListener('change',userInput=>{fullInfo.comments=userInput.currentTarget.value})
return fullInfo}
postReview=()=>{const dataToPost=getValuesFromForm();const reviewDate=new Date();const ul=document.getElementById('reviews-list');dataToPost.createdAt=dataToPost.updatedAt=reviewDate.getTime();if(!dataToPost.comments||!dataToPost.name){alert('Please fill all form fields first');return}
if(!dataToPost.rating){dataToPost.rating=1}
dataToPost.restaurant_id=getParameterByName('id');if(!navigator.onLine){sendDataWhenOnline(dataToPost);return}
fetch('http://localhost:1337/reviews',{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(dataToPost)}).then((response)=>{console.log(response,response.status);ul.appendChild(createReviewHTML(dataToPost))})}
sendDataWhenOnline=(dataToPost)=>{const ul=document.getElementById('reviews-list');DBHelper.idbSave([dataToPost],'pending-requests').then((response)=>{console.log('No connection. Data cached in IDB.')})
window.addEventListener('online',()=>{DBHelper.idbRead('pending-requests').then((requests)=>{requests.forEach((request)=>{fetch('http://localhost:1337/reviews',{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(request)}).then((res)=>{console.log('Posting data from idb',res);DBHelper.idbRemove(request,'pending-requests').then((pRes)=>{console.log('Removed from pending reqests')});ul.appendChild(createReviewHTML(request))})})})})}
createReviewHTML=(review)=>{const li=document.createElement('li');const name=document.createElement('p');name.innerHTML=review.name;li.appendChild(name);const date=document.createElement('p');const converedDate=new Date(review.updatedAt);date.innerHTML=`${converedDate.getDate()} / ${converedDate.getMonth()} / ${(converedDate.getYear() + 1900)}`
li.appendChild(date);const rating=document.createElement('p');rating.innerHTML=`Rating: ${review.rating}`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);return li}
fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');li.innerHTML=restaurant.name;li.setAttribute('aria-label',restaurant.name);breadcrumb.appendChild(li)}
getParameterByName=(name,url)=>{if(!url)
url=window.location.href;name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results)
return null;if(!results[2])
return'';return decodeURIComponent(results[2].replace(/\+/g,' '))}